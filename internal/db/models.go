// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type ContactRequestState string

const (
	ContactRequestStatePending  ContactRequestState = "pending"
	ContactRequestStateAccepted ContactRequestState = "accepted"
	ContactRequestStateRejected ContactRequestState = "rejected"
	ContactRequestStateBlocked  ContactRequestState = "blocked"
)

func (e *ContactRequestState) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ContactRequestState(s)
	case string:
		*e = ContactRequestState(s)
	default:
		return fmt.Errorf("unsupported scan type for ContactRequestState: %T", src)
	}
	return nil
}

type NullContactRequestState struct {
	ContactRequestState ContactRequestState `json:"contact_request_state"`
	Valid               bool                `json:"valid"` // Valid is true if ContactRequestState is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullContactRequestState) Scan(value interface{}) error {
	if value == nil {
		ns.ContactRequestState, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ContactRequestState.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullContactRequestState) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ContactRequestState), nil
}

type ContactState string

const (
	ContactStatePending  ContactState = "pending"
	ContactStateAccepted ContactState = "accepted"
	ContactStateBlocked  ContactState = "blocked"
)

func (e *ContactState) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ContactState(s)
	case string:
		*e = ContactState(s)
	default:
		return fmt.Errorf("unsupported scan type for ContactState: %T", src)
	}
	return nil
}

type NullContactState struct {
	ContactState ContactState `json:"contact_state"`
	Valid        bool         `json:"valid"` // Valid is true if ContactState is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullContactState) Scan(value interface{}) error {
	if value == nil {
		ns.ContactState, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ContactState.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullContactState) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ContactState), nil
}

type AuthSession struct {
	ID           string             `json:"id"`
	UserID       string             `json:"user_id"`
	DeviceID     string             `json:"device_id"`
	RefreshToken string             `json:"refresh_token"`
	ExpiresAt    pgtype.Timestamptz `json:"expires_at"`
	CreatedAt    pgtype.Timestamptz `json:"created_at"`
}

type Block struct {
	OwnerID      string             `json:"owner_id"`
	TargetUserID string             `json:"target_user_id"`
	Reason       pgtype.Text        `json:"reason"`
	CreatedAt    pgtype.Timestamptz `json:"created_at"`
}

type Contact struct {
	ID        string             `json:"id"`
	OwnerID   string             `json:"owner_id"`
	PeerID    string             `json:"peer_id"`
	Alias     pgtype.Text        `json:"alias"`
	State     ContactState       `json:"state"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	UpdatedAt pgtype.Timestamptz `json:"updated_at"`
}

type ContactRequest struct {
	ID         string              `json:"id"`
	FromUserID string              `json:"from_user_id"`
	ToUserID   string              `json:"to_user_id"`
	State      ContactRequestState `json:"state"`
	Message    pgtype.Text         `json:"message"`
	CreatedAt  pgtype.Timestamptz  `json:"created_at"`
}

type Device struct {
	ID        string             `json:"id"`
	UserID    string             `json:"user_id"`
	Name      string             `json:"name"`
	Platform  pgtype.Text        `json:"platform"`
	PushToken pgtype.Text        `json:"push_token"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	RevokedAt pgtype.Timestamptz `json:"revoked_at"`
}

type User struct {
	ID             string             `json:"id"`
	Username       string             `json:"username"`
	Phone          pgtype.Text        `json:"phone"`
	Email          pgtype.Text        `json:"email"`
	HashedPassword string             `json:"hashed_password"`
	Status         pgtype.Text        `json:"status"`
	CreatedAt      pgtype.Timestamptz `json:"created_at"`
	UpdatedAt      pgtype.Timestamptz `json:"updated_at"`
}
