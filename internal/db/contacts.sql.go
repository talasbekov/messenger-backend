// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: contacts.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createBlock = `-- name: CreateBlock :exec
INSERT INTO blocks (owner_id, target_user_id)
VALUES ($1, $2)
ON CONFLICT (owner_id, target_user_id) DO NOTHING
`

type CreateBlockParams struct {
	OwnerID      string `json:"owner_id"`
	TargetUserID string `json:"target_user_id"`
}

func (q *Queries) CreateBlock(ctx context.Context, arg CreateBlockParams) error {
	_, err := q.db.Exec(ctx, createBlock, arg.OwnerID, arg.TargetUserID)
	return err
}

const createContact = `-- name: CreateContact :one
INSERT INTO contacts (id, owner_id, peer_id, state)
VALUES ($1, $2, $3, 'accepted')
RETURNING id, owner_id, peer_id, alias, state, created_at, updated_at
`

type CreateContactParams struct {
	ID      string `json:"id"`
	OwnerID string `json:"owner_id"`
	PeerID  string `json:"peer_id"`
}

func (q *Queries) CreateContact(ctx context.Context, arg CreateContactParams) (Contact, error) {
	row := q.db.QueryRow(ctx, createContact, arg.ID, arg.OwnerID, arg.PeerID)
	var i Contact
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.PeerID,
		&i.Alias,
		&i.State,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createContactRequest = `-- name: CreateContactRequest :one
INSERT INTO contact_requests (id, from_user_id, to_user_id, message)
VALUES ($1, $2, $3, $4)
RETURNING id, from_user_id, to_user_id, state, message, created_at
`

type CreateContactRequestParams struct {
	ID         string      `json:"id"`
	FromUserID string      `json:"from_user_id"`
	ToUserID   string      `json:"to_user_id"`
	Message    pgtype.Text `json:"message"`
}

func (q *Queries) CreateContactRequest(ctx context.Context, arg CreateContactRequestParams) (ContactRequest, error) {
	row := q.db.QueryRow(ctx, createContactRequest,
		arg.ID,
		arg.FromUserID,
		arg.ToUserID,
		arg.Message,
	)
	var i ContactRequest
	err := row.Scan(
		&i.ID,
		&i.FromUserID,
		&i.ToUserID,
		&i.State,
		&i.Message,
		&i.CreatedAt,
	)
	return i, err
}

const deleteBlock = `-- name: DeleteBlock :exec
DELETE FROM blocks
WHERE owner_id = $1 AND target_user_id = $2
`

type DeleteBlockParams struct {
	OwnerID      string `json:"owner_id"`
	TargetUserID string `json:"target_user_id"`
}

func (q *Queries) DeleteBlock(ctx context.Context, arg DeleteBlockParams) error {
	_, err := q.db.Exec(ctx, deleteBlock, arg.OwnerID, arg.TargetUserID)
	return err
}

const deleteContact = `-- name: DeleteContact :exec
DELETE FROM contacts
WHERE owner_id = $1 AND peer_id = $2
`

type DeleteContactParams struct {
	OwnerID string `json:"owner_id"`
	PeerID  string `json:"peer_id"`
}

func (q *Queries) DeleteContact(ctx context.Context, arg DeleteContactParams) error {
	_, err := q.db.Exec(ctx, deleteContact, arg.OwnerID, arg.PeerID)
	return err
}

const findUserByIdentifier = `-- name: FindUserByIdentifier :one
SELECT id, username, phone, email, hashed_password, status, created_at, updated_at
FROM users
WHERE username = $1 OR email = $2 OR phone = $3
`

type FindUserByIdentifierParams struct {
	Username pgtype.Text `json:"username"`
	Email    pgtype.Text `json:"email"`
	Phone    pgtype.Text `json:"phone"`
}

func (q *Queries) FindUserByIdentifier(ctx context.Context, arg FindUserByIdentifierParams) (User, error) {
	row := q.db.QueryRow(ctx, findUserByIdentifier, arg.Username, arg.Email, arg.Phone)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Phone,
		&i.Email,
		&i.HashedPassword,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getContactRequest = `-- name: GetContactRequest :one
SELECT id, from_user_id, to_user_id, state, message, created_at FROM contact_requests
WHERE id = $1
`

func (q *Queries) GetContactRequest(ctx context.Context, id string) (ContactRequest, error) {
	row := q.db.QueryRow(ctx, getContactRequest, id)
	var i ContactRequest
	err := row.Scan(
		&i.ID,
		&i.FromUserID,
		&i.ToUserID,
		&i.State,
		&i.Message,
		&i.CreatedAt,
	)
	return i, err
}

const isBlocked = `-- name: IsBlocked :one
SELECT EXISTS(
    SELECT 1 FROM blocks
    WHERE (owner_id = $1 AND target_user_id = $2) OR (owner_id = $2 AND target_user_id = $1)
)
`

type IsBlockedParams struct {
	OwnerID      string `json:"owner_id"`
	TargetUserID string `json:"target_user_id"`
}

func (q *Queries) IsBlocked(ctx context.Context, arg IsBlockedParams) (bool, error) {
	row := q.db.QueryRow(ctx, isBlocked, arg.OwnerID, arg.TargetUserID)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const listContacts = `-- name: ListContacts :many
SELECT id, owner_id, peer_id, alias, state, created_at, updated_at FROM contacts
WHERE owner_id = $1 AND state = $2
`

type ListContactsParams struct {
	OwnerID string       `json:"owner_id"`
	State   ContactState `json:"state"`
}

func (q *Queries) ListContacts(ctx context.Context, arg ListContactsParams) ([]Contact, error) {
	rows, err := q.db.Query(ctx, listContacts, arg.OwnerID, arg.State)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Contact{}
	for rows.Next() {
		var i Contact
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.PeerID,
			&i.Alias,
			&i.State,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateContactRequestState = `-- name: UpdateContactRequestState :exec
UPDATE contact_requests
SET state = $2
WHERE id = $1
`

type UpdateContactRequestStateParams struct {
	ID    string              `json:"id"`
	State ContactRequestState `json:"state"`
}

func (q *Queries) UpdateContactRequestState(ctx context.Context, arg UpdateContactRequestStateParams) error {
	_, err := q.db.Exec(ctx, updateContactRequestState, arg.ID, arg.State)
	return err
}
